#!/usr/bin/env ruby
#encoding: utf-8

if RUBY_VERSION < '1.9'
  $KCODE='u'
else
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8
end

$:.unshift File.join(File.dirname(__FILE__), *%w{ .. lib })

require "optparse"
require "textmood"
require "yaml"

usage = <<-eos
Usage: #{File.basename($0)} [options] "<text>"
            OR
       echo "<text>" | #{File.basename($0)} [options]"
eos

def mini_usage(usage, notext = false)
  puts usage
  puts ""
  if notext
    puts "ERROR: Quoted text must be provided after the last option."
  else
    puts "ERROR: An IETF language tag must be provided using the -l/--language option,"
    puts "       or sentiment files must be provided with the -f/--file option. These"
    puts "       values can also be set in /etc/textmood.cfg or ~/.textmood."
  end
  puts ""
  puts "Use \"#{File.basename($0)} -h\" for full usage info."
  puts ""
  exit 20
end

def parse_config_file(file, debug = false)
  if File.file?(file)
    puts "Using config: #{file}" if debug
    YAML.load(File.read(file))
  else
    {}
  end
end

options = {:files => []}

opts_parser = OptionParser.new do |opts|
  opts.banner = usage
  opts.separator ""
  opts.separator "Returns a sentiment score of the provided text. Above 0 is usually"
  opts.separator "considered positive, below is considered negative."
  opts.separator ""
  opts.separator "MANDATORY options:"
  opts.on("-l", "--language LANGUAGE", "The IETF language tag for the provided text.",
                                       "Examples: en_US, no_NB") do |l|
    options[:language] = l
  end
  opts.separator ""
  opts.separator "              OR "
  opts.separator ""
  opts.on("-f", "--file PATH TO FILE", "Use the specified sentiment file. May be used",
                                       "multiple times to load several files. No other",
                                       "files will be loaded if this option is used.") do |f|
    options[:files] << f
  end
  opts.separator ""
  opts.separator "OPTIONAL options:"
  opts.on("-a", "--alias-file PATH TO FILE", "JSON file containing a hash that maps language codes to",
                                             "sentiment score files. This lets you use the convenience of",
                                             "language codes with custom sentiment score files.") do |a|
    options[:alias_file] = a.to_s
  end
  opts.separator ""
  opts.on("-n", "--normalize-score", "Tries to normalize the score to an integer between +/- 100",
                                     "according to the number of tokens that were scored, making",
                                     "it more feasible to compare scores for texts of different",
                                     "length") do |ns|
    options[:normalize_score] = true
  end
  opts.separator ""
  opts.on("-t", "--ternary-output", "Return 1 (positive), -1 (negative) or 0 (neutral)",
                                    "instead of the actual score. See also --min-threshold",
                                    "and --max-threshold.") do |n|
    options[:ternary_output] = true
  end
  opts.separator ""
  opts.on("-i", "--min-threshold FLOAT", "Scores lower than this are considered negative when",
                                         "using --ternary-output (default 0.5). Note that the",
                                         "threshold is compared to the normalized score, if applicable") do |min|
    options[:min_threshold] = min.to_f
  end
  opts.separator ""
  opts.on("-x", "--max-threshold FLOAT", "Scores higher than this are considered positive when",
                                         "using --ternary-output (default 0.5). Note that the",
                                         "threshold is compared to the normalized score, if applicable") do |max|
    options[:max_threshold] = max.to_f
  end
  opts.separator ""
  opts.on("-s", "--start-ngram INTEGER", "The lowest word N-gram number to split the text into",
                                         "(default 1). Note that this only makes sense if the",
                                         "sentiment file has tokens of similar N-gram length") do |start_ngram|
    options[:start_ngram] = start_ngram.to_i
  end
  opts.separator ""
  opts.on("-e", "--end-ngram INTEGER", "The highest word N-gram number to to split the text into",
                                       "(default 1). Note that this only makes sense if the",
                                       "sentiment file has tokens of similar N-gram length") do |end_ngram|
    options[:end_ngram] = end_ngram.to_i
  end
  opts.separator ""
  opts.on("-k", "--skip-symbols", "Do not include symbols file (emoticons etc.). Only applies",
                                  "when using -l/--language.") do |s|
    options[:include_symbols] = false
  end
  opts.separator ""
  opts.on("-c", "--config PATH TO FILE", "Use the specified config file. If not specified, textmood will",
                                         "look for /etc/textmood.cfg and ~/.textmood. Settings in the user",
                                         "config will override settings from the global file.") do |c|
    options[:config] = c.to_s
  end
  opts.separator ""
  opts.on("-d", "--debug", "Prints out the score for each token in the provided text",
                           "or 'nil' if the token was not found in the sentiment file") do |d|
    options[:debug] = true
  end
  opts.separator ""
  opts.on("-v", "--verbose", "Prints out some useful statistics about the analysis",
                             "(counts, averages etc).") do |v|
    options[:verbose] = true
  end
  opts.separator ""
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    puts ""
    exit
  end
end
opts_parser.parse!

if options[:config]
  options.merge!(parse_config_file(options[:config], options[:debug]))
else
  ["/etc/textmood.cfg", File.expand_path("~/.textmood")].each do |file|
    options.merge!(parse_config_file(file, options[:debug]))
  end
end

options = Hash[options.map{ |k, v| [k.to_sym, v] }]

unless ((options[:language] or not options[:files].empty?) or (ARGV[0] and ARGV[1]))
  mini_usage(usage)
  exit 2
end

def do_main(text, options)
  tm = TextMood.new(options)
  puts tm.analyze(text)
end

if ARGV[0]
  do_main(ARGV[0], options)
else
  text = $stdin.read
  if text
    do_main(text, options)
  else
    mini_usage(usage, true)
  end
end
